// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package ci

import (
	"bytes"
	"fmt"

	"ci/thrift_gen/base"
	"code.byted.org/gopkg/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
var GoUnusedProtection__ int

type IsTargetRepoUpdatedRequest struct {
	RepoId *int64 `thrift:"RepoId,1" json:"RepoId"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewIsTargetRepoUpdatedRequest() *IsTargetRepoUpdatedRequest {
	return &IsTargetRepoUpdatedRequest{}
}

var IsTargetRepoUpdatedRequest_RepoId_DEFAULT int64

func (p *IsTargetRepoUpdatedRequest) GetRepoId() int64 {
	if !p.IsSetRepoId() {
		return IsTargetRepoUpdatedRequest_RepoId_DEFAULT
	}
	return *p.RepoId
}

var IsTargetRepoUpdatedRequest_Base_DEFAULT *base.Base

func (p *IsTargetRepoUpdatedRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return IsTargetRepoUpdatedRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *IsTargetRepoUpdatedRequest) IsSetRepoId() bool {
	return p.RepoId != nil
}

func (p *IsTargetRepoUpdatedRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *IsTargetRepoUpdatedRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsTargetRepoUpdatedRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RepoId = &v
	}
	return nil
}

func (p *IsTargetRepoUpdatedRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *IsTargetRepoUpdatedRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IsTargetRepoUpdatedRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField255(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsTargetRepoUpdatedRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRepoId() {
		if err := oprot.WriteFieldBegin("RepoId", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:RepoId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.RepoId)); err != nil {
			return fmt.Errorf("%T.RepoId (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:RepoId: %s", p, err)
		}
	}
	return err
}

func (p *IsTargetRepoUpdatedRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *IsTargetRepoUpdatedRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsTargetRepoUpdatedRequest(%+v)", *p)
}

type IsTargetRepoUpdatedResponse struct {
	IsUpdated *bool `thrift:"IsUpdated,1" json:"IsUpdated"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewIsTargetRepoUpdatedResponse() *IsTargetRepoUpdatedResponse {
	return &IsTargetRepoUpdatedResponse{}
}

var IsTargetRepoUpdatedResponse_IsUpdated_DEFAULT bool

func (p *IsTargetRepoUpdatedResponse) GetIsUpdated() bool {
	if !p.IsSetIsUpdated() {
		return IsTargetRepoUpdatedResponse_IsUpdated_DEFAULT
	}
	return *p.IsUpdated
}

var IsTargetRepoUpdatedResponse_BaseResp_DEFAULT *base.BaseResp

func (p *IsTargetRepoUpdatedResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return IsTargetRepoUpdatedResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *IsTargetRepoUpdatedResponse) IsSetIsUpdated() bool {
	return p.IsUpdated != nil
}

func (p *IsTargetRepoUpdatedResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *IsTargetRepoUpdatedResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IsTargetRepoUpdatedResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.IsUpdated = &v
	}
	return nil
}

func (p *IsTargetRepoUpdatedResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *IsTargetRepoUpdatedResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IsTargetRepoUpdatedResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField255(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IsTargetRepoUpdatedResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsUpdated() {
		if err := oprot.WriteFieldBegin("IsUpdated", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:IsUpdated: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.IsUpdated)); err != nil {
			return fmt.Errorf("%T.IsUpdated (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:IsUpdated: %s", p, err)
		}
	}
	return err
}

func (p *IsTargetRepoUpdatedResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *IsTargetRepoUpdatedResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsTargetRepoUpdatedResponse(%+v)", *p)
}

type FetchTargetRepoLastCommitRequest struct {
	RepoId *int64 `thrift:"RepoId,1" json:"RepoId"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewFetchTargetRepoLastCommitRequest() *FetchTargetRepoLastCommitRequest {
	return &FetchTargetRepoLastCommitRequest{}
}

var FetchTargetRepoLastCommitRequest_RepoId_DEFAULT int64

func (p *FetchTargetRepoLastCommitRequest) GetRepoId() int64 {
	if !p.IsSetRepoId() {
		return FetchTargetRepoLastCommitRequest_RepoId_DEFAULT
	}
	return *p.RepoId
}

var FetchTargetRepoLastCommitRequest_Base_DEFAULT *base.Base

func (p *FetchTargetRepoLastCommitRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return FetchTargetRepoLastCommitRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *FetchTargetRepoLastCommitRequest) IsSetRepoId() bool {
	return p.RepoId != nil
}

func (p *FetchTargetRepoLastCommitRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *FetchTargetRepoLastCommitRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchTargetRepoLastCommitRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RepoId = &v
	}
	return nil
}

func (p *FetchTargetRepoLastCommitRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *FetchTargetRepoLastCommitRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchTargetRepoLastCommitRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField255(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchTargetRepoLastCommitRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRepoId() {
		if err := oprot.WriteFieldBegin("RepoId", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:RepoId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.RepoId)); err != nil {
			return fmt.Errorf("%T.RepoId (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:RepoId: %s", p, err)
		}
	}
	return err
}

func (p *FetchTargetRepoLastCommitRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *FetchTargetRepoLastCommitRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchTargetRepoLastCommitRequest(%+v)", *p)
}

type CommitStruct struct {
	Id             *int64  `thrift:"Id,1" json:"Id"`
	Msg            *string `thrift:"Msg,2" json:"Msg"`
	Author         *string `thrift:"Author,3" json:"Author"`
	LastUpdateTime *int64  `thrift:"LastUpdateTime,4" json:"LastUpdateTime"`
}

func NewCommitStruct() *CommitStruct {
	return &CommitStruct{}
}

var CommitStruct_Id_DEFAULT int64

func (p *CommitStruct) GetId() int64 {
	if !p.IsSetId() {
		return CommitStruct_Id_DEFAULT
	}
	return *p.Id
}

var CommitStruct_Msg_DEFAULT string

func (p *CommitStruct) GetMsg() string {
	if !p.IsSetMsg() {
		return CommitStruct_Msg_DEFAULT
	}
	return *p.Msg
}

var CommitStruct_Author_DEFAULT string

func (p *CommitStruct) GetAuthor() string {
	if !p.IsSetAuthor() {
		return CommitStruct_Author_DEFAULT
	}
	return *p.Author
}

var CommitStruct_LastUpdateTime_DEFAULT int64

func (p *CommitStruct) GetLastUpdateTime() int64 {
	if !p.IsSetLastUpdateTime() {
		return CommitStruct_LastUpdateTime_DEFAULT
	}
	return *p.LastUpdateTime
}
func (p *CommitStruct) IsSetId() bool {
	return p.Id != nil
}

func (p *CommitStruct) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *CommitStruct) IsSetAuthor() bool {
	return p.Author != nil
}

func (p *CommitStruct) IsSetLastUpdateTime() bool {
	return p.LastUpdateTime != nil
}

func (p *CommitStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommitStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = &v
	}
	return nil
}

func (p *CommitStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Msg = &v
	}
	return nil
}

func (p *CommitStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Author = &v
	}
	return nil
}

func (p *CommitStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.LastUpdateTime = &v
	}
	return nil
}

func (p *CommitStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CommitStruct"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommitStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:Id: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Id)); err != nil {
			return fmt.Errorf("%T.Id (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:Id: %s", p, err)
		}
	}
	return err
}

func (p *CommitStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err := oprot.WriteFieldBegin("Msg", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:Msg: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Msg)); err != nil {
			return fmt.Errorf("%T.Msg (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:Msg: %s", p, err)
		}
	}
	return err
}

func (p *CommitStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthor() {
		if err := oprot.WriteFieldBegin("Author", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:Author: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Author)); err != nil {
			return fmt.Errorf("%T.Author (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:Author: %s", p, err)
		}
	}
	return err
}

func (p *CommitStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastUpdateTime() {
		if err := oprot.WriteFieldBegin("LastUpdateTime", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:LastUpdateTime: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.LastUpdateTime)); err != nil {
			return fmt.Errorf("%T.LastUpdateTime (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:LastUpdateTime: %s", p, err)
		}
	}
	return err
}

func (p *CommitStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitStruct(%+v)", *p)
}

type FetchTargetRepoLastCommitResonse struct {
	Commit *CommitStruct `thrift:"Commit,1" json:"Commit"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewFetchTargetRepoLastCommitResonse() *FetchTargetRepoLastCommitResonse {
	return &FetchTargetRepoLastCommitResonse{}
}

var FetchTargetRepoLastCommitResonse_Commit_DEFAULT *CommitStruct

func (p *FetchTargetRepoLastCommitResonse) GetCommit() *CommitStruct {
	if !p.IsSetCommit() {
		return FetchTargetRepoLastCommitResonse_Commit_DEFAULT
	}
	return p.Commit
}

var FetchTargetRepoLastCommitResonse_BaseResp_DEFAULT *base.BaseResp

func (p *FetchTargetRepoLastCommitResonse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return FetchTargetRepoLastCommitResonse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *FetchTargetRepoLastCommitResonse) IsSetCommit() bool {
	return p.Commit != nil
}

func (p *FetchTargetRepoLastCommitResonse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *FetchTargetRepoLastCommitResonse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchTargetRepoLastCommitResonse) ReadField1(iprot thrift.TProtocol) error {
	p.Commit = &CommitStruct{}
	if err := p.Commit.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Commit, err)
	}
	return nil
}

func (p *FetchTargetRepoLastCommitResonse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *FetchTargetRepoLastCommitResonse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchTargetRepoLastCommitResonse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField255(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchTargetRepoLastCommitResonse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommit() {
		if err := oprot.WriteFieldBegin("Commit", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:Commit: %s", p, err)
		}
		if err := p.Commit.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Commit, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:Commit: %s", p, err)
		}
	}
	return err
}

func (p *FetchTargetRepoLastCommitResonse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *FetchTargetRepoLastCommitResonse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchTargetRepoLastCommitResonse(%+v)", *p)
}
